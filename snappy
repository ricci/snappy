#!/usr/bin/env python3

import arrow
import sys
import re
from subprocess import check_output

zfsmap = { }
snapshots = { }

class Place:

    _places = { }
    _paths = { }

    def __init__(self,name,path):
        self._name = name
        self._path = path
        Place._places[name] = self
        Place._paths[path] = self

    def place(self):
        return self._name

    def path(self):
        return self._path

    def byName(name):
        return Place._places[name]

    def byPath(path):
        return Place._paths[path]

    def hasName(name):
        return name in Place._places

    def hasPath(path):
        return  path in Place._paths

# XXX: should be in a config file
Place("test", "/test")

class Snapshot:
    def isSnappyZFS(snap):
        return re.match(r"snappy-(\d+)",snap)

    def isSnappyTS(snap):
        return re.match(r"snappy-(\w+)-(\d+)",snap)

    def __init__(self,place,stamp):
        self._place = place
        self._stamp = stamp
        self._zfs = None
        self._tarsnap = None
        if not place in snapshots:
            snapshots[place] = { }
        snapshots[place][stamp] = self
        
    def hasZFS(self):
        return (self._zfs is not None)

    def setZFS(self,zfsname):
        self._zfs = zfsname

    def setTarsnap(self, tarsnapname):
        self._tarsnap = tarsnapname

    def hasTarsnap(self):
        return (self._tarsnap is not None)

    def printListing(self):
        print("%s %s %s" % (self._stamp, self._zfs, self._tarsnap))

    def factory(place,stamp):
        print("Factory %s %s" % (place, stamp))
        if place in snapshots and stamp in snapshots[place]:
            return snapshots[place][stamp]
        else:
            return Snapshot(place,stamp)

def initZFS():
    zfsout = check_output(["/sbin/zfs","list","-Hp"])
    for line in iter(zfsout.splitlines()):
        arr = line.decode('utf-8').split()
        path, dataset = arr[4],arr[0]
        zfsmap[path] = dataset
        zfsmap[dataset] = path

    zfsout = check_output(["/sbin/zfs","list","-Hp","-t","snap"])
    for line in iter(zfsout.splitlines()):
        arr = line.decode('utf-8').split()
        snapname = arr[0]
        dataset,snap = snapname.split('@')
        if Snapshot.isSnappyZFS(snap) and dataset in zfsmap and Place.hasPath(zfsmap[dataset]):
            newsnapshot = Snapshot.factory(Place.byPath(zfsmap[dataset]).place(), Snapshot.isSnappyZFS(snap).group(1))
            newsnapshot.setZFS(snapname)

def initTarsnap():
    tsfile = open("/tmp/tarsnap-archives.txt","r")
    for line in tsfile:
        if Snapshot.isSnappyTS(line):
            groups = Snapshot.isSnappyTS(line)
            place = groups.group(1)
            stamp = groups.group(2)
            newsnapshot = Snapshot.factory(place,stamp)
            newsnapshot.setTarsnap(line.rstrip())


def list():
    initZFS()
    initTarsnap()
    for name, place in Place._places.items():
        print("***** %s (%s)" % (name,place.path()))
        for stamp, snapshot in snapshots[name].items():
            snapshot.printListing()

def snapZFS():
    pass

def usage():
    print("snappy list")
    exit(1)


commands = { 'list' : list, 'usage' : usage }

if len(sys.argv) < 2:
    usage()
else:
    commands.get(sys.argv[1], usage)()
