#!/usr/bin/env python3

import arrow
import sys
import re

from snappylib.place import Place
from snappylib.snapshot import Snapshot, snapshots
import snappylib.zfs as zfs

from subprocess import check_output

# XXX: This stuff belongs in config files
TARSNAP_BIN  = "/usr/local/bin/tarsnap"
TARSNAP_ARGS = ["--keyfile", "/home/ricci/tarsnap-test/hactar-test.key", "--cachedir", "/home/ricci/tarsnap-test/.cache"]

def getPlace():
    # XXX: Return actual object, support more than one
    place = sys.argv.pop(0)
    if Place.hasName(place):
        return place
    else:
        sys.exit("Specified nonexistent place {}".format(place))

def getSnap(place):
    if not place in snapshots:
        sys.exit("Specified nonexistent place {}".format(place))
    snap = sys.argv.pop(0)
    if not snap in snapshots[place]:
        sys.exit("Specified nonexistent snapshot {:d}".format(snap))
    return snapshots[place][snap]

# XXX: should be in a config file
Place("test", "/test")


def initTarsnap():
    tsout = check_output([TARSNAP_BIN] +  TARSNAP_ARGS + ["--list-archives"])
    for line in iter(tsout.splitlines()):
        line = line.decode('utf-8')
        if Snapshot.isSnappyTS(line):
            groups = Snapshot.isSnappyTS(line)
            place = groups.group(1)
            stamp = groups.group(2)
            newsnapshot = Snapshot.factory(place,stamp)
            newsnapshot.setTarsnap(line.rstrip())

def list():
    zfs.initCache()
    initTarsnap()
    for name, place in sorted(Place._places.items()):
        print("***** %s (%s)" % (name,place.path()))
        Snapshot.printHeader()
        for stamp in sorted(snapshots[name].keys(),key = lambda i: int(i)):
            snapshots[name][stamp].printListing()

def nuke():
    zfs.initCache()
    initTarsnap()
    place = getPlace()
    snap = getSnap(place)
    print("Gonna nuke %s" % snap)
    if snap.hasZFS():
        zfs.deleteSnap(snap)
    if snap.hasTarsnap():
        deleteTS(snap)

def deleteTS(snap):
    print("deleteTS: %s" % snap._tarsnap)
    check_output([TARSNAP_BIN] + TARSNAP_ARGS + ["-d","-f",snap._tarsnap])

time = arrow.now()
curstamp = time.timestamp

def snapZFS(place = None):
    if not place:
        place = getPlace()
    zfs.createSnapshot(place,curstamp)

def snapTS(place = None):
    if not place:
        place = getPlace()

    initTarsnap()

    tssnapname = "snappy-%s-%s" % (place, curstamp)
    print("snapTS: %s" % tssnapname)
    check_output([TARSNAP_BIN] + TARSNAP_ARGS + ["-c","-f",tssnapname,Place.byName(place).path()])

def snapBoth():
    place = getPlace()

    zfs.createSnapshot(place,curstamp)
    snapTS(place)

def usage():
    print("Do somethin' else")
    exit(1)

def check():
    def startCheck(text):
        print("### Checking {:s} ...".format(text))
    def passCheck():
        print("    passed")
    def skipCheck(text):
        print("    skipped ({:s})".format(text))
    def failCheck(text,output):
        print("    failed: {:s}".format(text))
        if output:
            print("----------------------------------------------------------------------")
            print(output)
            print("----------------------------------------------------------------------")
    """
    Run a little test to see whether everything appears to be configured properly
    """

    startCheck("configuration file")
    skipCheck("not implemented")

commands = { 'list' : list, 'snap' : snapBoth, 'zfssnap' : snapZFS, 'tssnap' : snapTS, 'usage' : usage, 'nuke' : nuke, 'check' : check }

if len(sys.argv) < 2:
    usage()
else:
    sys.argv.pop(0)
    commands.get(sys.argv.pop(0), usage)()
