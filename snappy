#!/usr/bin/env python3

import arrow
import sys
import re
from subprocess import check_output

zfsmap = { }
snapshots = { }

# XXX: This stuff belongs in config files
TARSNAP_BIN  = "/usr/local/bin/tarsnap"
TARSNAP_ARGS = ["--keyfile", "/home/ricci/tarsnap-test/hactar-test.key", "--cachedir", "/home/ricci/tarsnap-test/.cache"]
ZFS_BIN      = "/sbin/zfs"

def getPlace():
    # XXX: Return actual object, support more than one
    place = sys.argv.pop(0)
    if Place.hasName(place):
        return place
    else:
        sys.exit("Specified nonexistent place {}".format(place))

class Place:

    _places = { }
    _paths = { }

    def __init__(self,name,path):
        self._name = name
        self._path = path
        Place._places[name] = self
        Place._paths[path] = self

    def place(self):
        return self._name

    def path(self):
        return self._path

    def byName(name):
        return Place._places[name]

    def byPath(path):
        return Place._paths[path]

    def hasName(name):
        return name in Place._places

    def hasPath(path):
        return  path in Place._paths

# XXX: should be in a config file
Place("test", "/test")

class Snapshot:
    def isSnappyZFS(snap):
        return re.match(r"snappy-(\d+)",snap)

    def isSnappyTS(snap):
        return re.match(r"snappy-(\w+)-(\d+)",snap)

    def __init__(self,place,stamp):
        self._place = place
        self._stamp = int(stamp)
        self._zfs = None
        self._tarsnap = None
        if not place in snapshots:
            snapshots[place] = { }
        snapshots[place][stamp] = self
        
    def hasZFS(self):
        return (self._zfs is not None)

    def setZFS(self,zfsname):
        self._zfs = zfsname

    def setTarsnap(self, tarsnapname):
        self._tarsnap = tarsnapname

    def hasTarsnap(self):
        return (self._tarsnap is not None)

    def printHeader():
        print("{:10}   {:<20s}   {:5}   {:5}".format("ID","When","ZFS","TS"))

    def printListing(self):
        print("{:10}   {:<20s}   {!r:5}   {!r:5}".format(self._stamp,arrow.get(self._stamp).humanize(), self.hasZFS(), self.hasTarsnap()))

    def factory(place,stamp):
        if place in snapshots and stamp in snapshots[place]:
            return snapshots[place][stamp]
        else:
            return Snapshot(place,stamp)

def initZFS():
    zfsout = check_output([ZFS_BIN,"list","-Hp"])
    for line in iter(zfsout.splitlines()):
        arr = line.decode('utf-8').split()
        path, dataset = arr[4],arr[0]
        zfsmap[path] = dataset
        zfsmap[dataset] = path
        if Place.hasPath(path):
            zfsmap[Place.byPath(path).place()] = dataset

    zfsout = check_output([ZFS_BIN,"list","-Hp","-t","snap"])
    for line in iter(zfsout.splitlines()):
        arr = line.decode('utf-8').split()
        snapname = arr[0]
        dataset,snap = snapname.split('@')
        if Snapshot.isSnappyZFS(snap) and dataset in zfsmap and Place.hasPath(zfsmap[dataset]):
            newsnapshot = Snapshot.factory(Place.byPath(zfsmap[dataset]).place(), Snapshot.isSnappyZFS(snap).group(1))
            newsnapshot.setZFS(snapname)

def initTarsnap():
    tsout = check_output([TARSNAP_BIN] +  TARSNAP_ARGS + ["--list-archives"])
    for line in iter(tsout.splitlines()):
        line = line.decode('utf-8')
        if Snapshot.isSnappyTS(line):
            groups = Snapshot.isSnappyTS(line)
            place = groups.group(1)
            stamp = groups.group(2)
            newsnapshot = Snapshot.factory(place,stamp)
            newsnapshot.setTarsnap(line.rstrip())


def list():
    initZFS()
    initTarsnap()
    for name, place in sorted(Place._places.items()):
        print("***** %s (%s)" % (name,place.path()))
        Snapshot.printHeader()
        for stamp in sorted(snapshots[name].keys(),key = lambda i: int(i)):
            snapshots[name][stamp].printListing()

time = arrow.now()
curstamp = time.timestamp

def snapZFS(place = None):
    if not place:
        place = getPlace()

    initZFS()

    zfssnapname = "snappy-%s" % curstamp
    zfsfullsnapname = "%s@%s" % (zfsmap[place],zfssnapname)
    print("snapZFS: %s" % zfsfullsnapname)
    check_output([ZFS_BIN, "snapshot", zfsfullsnapname])

def snapTS(place = None):
    if not place:
        place = getPlace()

    initTarsnap()

    tssnapname = "snappy-%s-%s" % (place, curstamp)
    print("snapTS: %s" % tssnapname)
    check_output([TARSNAP_BIN] + TARSNAP_ARGS + ["-c","-f",tssnapname,Place.byName(place).path()])

def snapBoth():
    place = getPlace()

    snapZFS(place)
    snapTS(place)

def usage():
    print("snappy list")
    exit(1)


commands = { 'list' : list, 'snap' : snapBoth, 'zfssnap' : snapZFS, 'tssnap' : snapTS, 'usage' : usage }

if len(sys.argv) < 2:
    usage()
else:
    sys.argv.pop(0)
    commands.get(sys.argv.pop(0), usage)()
